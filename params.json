{"name":"Vehicle Inventory Management - A Technical Design Document ","tagline":"Backend solution to support vehicle inventory maintenance. ","body":"### Overview\r\nWe will create a vehicle inventory management system to support front-end clients' needs which include the following use-cases : \r\n1. Dealership web site support for viewing data related to vehicle inventory via an existing CMS application.  \r\n2. Updating inventory data via an existing admin app. \r\n\r\n\r\n### Considerations and Assumptions\r\n\r\n####Environment\r\nWe have production and non-production aws accounts with full access in the non-prod accounts to create, modify, and deliver our solution.\r\n\r\n####Team Experience\r\nWe have a team of developers that have sufficient AWS rights and are familiar with \r\n1. cicd tooling (terraform, codebuild, roles and policies, proper tagging, and Cloudwatch monitoring/alerting. \r\n2. languages: Java, Python and NodeJS\r\n3. database design and implementation: DynamoDB\r\n\r\n####The Data\r\n\r\n1. Each payload (file) represents ALL the inventory for an individual dealer. \r\n2. There is no limit to the number of vehicles that can appear in a payload.  \r\n2. Dealers are allowed to send any number of feeds during the nightly window. (emergency updates, etc) \r\n2. The dealer identifier is embedded in the filename, adhering to pre-defined naming conventions. \r\n3. We will NOT store personal info or any data requiring privacy.   \r\n3. Dealers have already been vetted and are managed in a separate solution.  Access to dealer contact info is available to our solution.\r\n3. If a payload's dealer id is not valid, the system will discard the feed for that \"unknown\" dealer. \r\n1. Industry standards exist to define appropriate values for vehicle properties based on OEM build specs.  \r\n2. Inventory feeds are received nightly in a csv format. \r\n3. The processing and syndication of feeds does not take longer than a 24 hour window. \r\n4. Feeds taking longer then the predefined window shall be treated as stale and appropriate notifications shall be sent. \r\n5. The processing and syndication of feeds will not negatively effect existing client application performance.\r\n6. Feeds are handled in the order in which they are received, based on timestamp. \r\n7. Redundant feeds do not cause adverse effects to overall inventory.  (updating inventory should be idempotent)\r\n6. Sourced inventory data should be scrubbed and validated, setting aside invalid payloads and notifying the authors of such payloads. \r\n    a.  Validation Rules  (all fields are REQUIRED)\r\n        i.  Year -> 4 digit valid year (Years may include future)\r\n        ii. Make -> industry standard values and abbreviations\r\n        iii.  Model -> industry standard values and abbreviations\r\n        iv.  BodyStyle -> industry standard values and abbreviations\r\n        v.  vin ->  must be a valid vin (leverage existing vin validation routines)\r\n        vi.  color ->  as defined by the oem\r\n        vii. mileage -> round up to whole number\r\n        viii.  msrp ->  with 2 digits after decimal point\r\n        ix.  asking_price ->  with 2 digits after decimal point\r\n8. DynamoDB will be the source of truth for our inventory data.  Our data schema is simple and a good fit for DynamoDB, which can handle more 10 trillion requests per day and more than 20 million requests per second.\r\n9. Future use-cases for inventory data are unknown at this time.  We will provide opportunities for future solutions to receive the feeds as they come in, via DynamoDB streams or JMS topics.  The payloads themselves are immutable (preserving the paper trail). \r\n\r\n##Inventory Management API\r\nApi documentation and helpful guides are published via a github readme (or github static pages site) and kept up-to-date as the solution evolves. \r\nClient application use cases are captured in GraphQL API contracts, providing predictable data shaping for the client.\r\nThe client does NOT need to know what resources are aggregated on the backend to satisfy front-end requests.  \r\nClient-side pre-request validation is exercised, with backend validation present in the future event that we gain additional clients.   \r\nStandard HTTP Responses and (Successful and Error) are supported in all calls to the api. Response status and messaging is fully described in the api documentation. \r\n\r\n        \r\n\r\n##Audience and Traffic\r\nPeak hours for client activity occurs during standard business hours (8am to 7pm EST).\r\nAudience consist of dealership website user activity and Inventory Management application activity.    \r\n\r\n\r\n \r\n\r\n \r\n \r\n\r\n\r\n### Considerations\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Inventory Feeds and Dataload\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Inventory Management API\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}